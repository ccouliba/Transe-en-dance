"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
import sys
from django.utils.translation import gettext_lazy as _
from pathlib import Path
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-o=4*ygn5oz$&iw6-ru(t=c+7wx2fjl9bs9xlka3b*@-204-vgn'
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = bool(os.environ.get("DEBUG", default=0))

# 'DJANGO_ALLOWED_HOSTS' should be a single string of hosts with a space between each.
# For example:'DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]'
# ALLOWED_HOSTS = ['bess-f*r*s*.clusters.42paris.fr' 'localhost' '127.0.0.1']
ALLOWE_HOSTS = []
# ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").split(" ")

# For dev environnement, i have to comment these parameters
# SECURE_SSL_REDIRECT = True
# CSRF_COOKIE_SECURE = True
# SESSION_COOKIE_SECURE = True

# CORS_ALLOW_ALL_ORIGINS = True  #todo : a enlever en prod
# CORS_ALLOW_CREDENTIALS = True
# CSRF_TRUSTED_ORIGINS = [
# 	'http://localhost:8000',
# 	'http://127.0.0.1:8000',
# ]
# CORS_ALLOW_HEADERS = list(default_headers) + [
# 	'X-CSRFToken',
# ]

# CSRF_COOKIE_SAMESITE = 'Lax'  # ou 'None' si nécessaire, mais cela nécessite HTTPS
# CSRF_COOKIE_HTTPONLY = False  # Permet l'accès au cookie CSRF via JavaScript
# SESSION_COOKIE_SAMESITE = 'Lax'  # ou 'None' si nécessaire, mais cela nécessite HTTPS

# Application definition



INSTALLED_APPS = [
    # 'elasticapm.contrib.django',
	'back',
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'rest_framework',
	'rest_framework.authtoken',
    'django_elasticsearch_dsl',
]

MIDDLEWARE = [
    'back.middleware.Logging.LoggingMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'server.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [os.path.join(BASE_DIR, 'back', 'templates')],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
				'back.context_variables_processors.texts_to_translate',
			],
		},
	},
]

WSGI_APPLICATION = 'server.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases



DATABASES = {
	'default': {
		'ENGINE': os.getenv('SQL_ENGINE', 'django.db.backends.postgresql_psycopg2'),
		'NAME': os.getenv('SQL_DATABASE', 'db1'),
		'USER': os.getenv('SQL_USER', 'ccouliba'),
		'PASSWORD': os.getenv('SQL_PASSWORD'),
		'HOST': os.getenv('SQL_HOST', 'localhost'),
		# 'HOST': 'localhost', #todo : A MODIFIER (juste pour pouvoir executer django localement)
		'PORT': os.getenv('SQL_PORT', '5432'),
	}
}

if os.getenv("DEV_ENV", False):
# on localhost
    DATABASES = {
        'default': {
            'ENGINE': os.getenv('SQL_ENGINE', 'django.db.backends.postgresql_psycopg2'),
            'NAME': os.getenv('SQL_DATABASE', 'db1'),
            'USER': os.getenv('SQL_USER', 'ccouliba'),
            'PASSWORD': os.getenv('SQL_PASSWORD', "password"),
            'HOST': os.getenv('SQL_HOST', 'localhost'),
            # 'HOST': 'localhost', #todo : A MODIFIER (juste pour pouvoir executer django localement)
            'PORT': os.getenv('SQL_PORT', '5432'),
        }
    }



# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGES = [
	('en', _('English')),
	('fr', _('French')),
	('es', _('Spanish')),
	]

LANGUAGE_COOKIE_NAME = 'language'

# Path to translation files (.po and .mo once compilation is done)
LOCALE_PATHS = [ os.path.join(BASE_DIR, 'locale'), ]

LANGUAGE_CODE = 'en-us'

USE_TZ = True

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'back.User'

LOGIN_REDIRECT_URL = '/pong/home'
LOGOUT_REDIRECT_URL = '/pong/login'

# to manage static files (e.g. images, JavaScript, CSS)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# STATIC_URL = "static/"

STATICFILES_DIRS = [
	os.path.join(BASE_DIR, 'back/static'),
	os.path.join(BASE_DIR, 'front')
]

# Chemin pour les fichiers statiques collectés (utilisé avec collectstatic)
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# pour l'avatar
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Fuseau horaire
TIME_ZONE = 'Europe/Paris'
USE_TZ = True

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ]
}

# # For logging (devops)
LOGGING = {
    # Defines the dict version for logging config ; Should always be 1 ; another value seems to cause issues
    'version': 1,
    'disable_existing_loggers': False, # ?q= false -> not activated
    
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s]::[%(levelname)s]::[%(name)s]=> (%(message)s)', # [%(funcName)s]::
            'datefmt': '%Y/%m/%d %H:%M:%S',
        },
        'simple': {
            'format': '[%(name)s]=> (%(message)s)',
        },
    },
    
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '../project/logs/back.logs',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'simple',
        },
    },
    
    'root': {
        'handlers': ['file', 'console'],
        'level': 'WARNING',
    },
    
    'loggers': {
        'back': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True, # If logs should be propagate to parent logs
        },
        'backend': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.db.backend': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        }, 
    },
}

# FOR ELASTICSEARCH APP 
ELASTICSEARCH_DSL = {
    'default': {
        'hosts': os.getenv('ELASTICSEARCH_DSL_HOSTS'),
        'http_auth': (os.getenv('ELASTIC_USERNAME'), os.getenv('ELASTIC_PASSWORD')),
    },
}
